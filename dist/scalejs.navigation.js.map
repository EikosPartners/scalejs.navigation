{"version":3,"sources":["../src/scalejs.navigation.js"],"names":[],"mappings":"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","file":"scalejs.navigation.js","sourcesContent":["import core from 'scalejs.core';\r\nimport ko from 'knockout';\r\nimport crossroads from 'crossroads';\r\nimport hasher from 'hasher';\r\nimport _ from 'lodash';\r\n\r\n    var merge = core.object.merge,\r\n        navLinks = ko.observableArray(),\r\n        activeLink = ko.observable(),\r\n        has = core.object.has,\r\n        navLinkMap = {},\r\n        navigation = navigation,\r\n        active = true,\r\n        config = core.type.is(module.config, 'function') ? module.config() || {} : {},\r\n        allowSetHash = has(config.allowSetHash) ? config.allowSetHash : true,\r\n        current = {},\r\n        observableCurrent = ko.observable(current);\r\n\r\n    function parseQuery(qstr) {\r\n        var query = {}, parsed;\r\n        var a = qstr.substr(1).split('&');\r\n        for (var i = 0; i < a.length; i = i+1 ) {\r\n            var b = a[i].split('=');\r\n\r\n            query[decodeURIComponent(b[0])] = decodeURIComponent(b[1] || '');\r\n            try {\r\n                query[decodeURIComponent(b[0])] = JSON.parse(query[decodeURIComponent(b[0])])\r\n            }\r\n            catch(ignore) {\r\n                //if it's already a string, we don't need to do anything\r\n            }\r\n        }\r\n        Object.keys(query).forEach(function(key) {\r\n            // TODO: implement better typecasting\r\n            if (query[key] === 'true') {\r\n                query[key] = true;\r\n            }\r\n            else if (query[key] === 'false') {\r\n                query[key] = false;\r\n            }\r\n            else if (typeof query[key] === 'string' && query[key].indexOf(',') !== -1) {\r\n               query[key] = query[key].split(',');\r\n            }\r\n        })\r\n        return query;\r\n    }\r\n\r\n    function addNav(navOptions, callback) {\r\n        var route, defaultRoute, navCallback, link, decodeRoute,\r\n            navText = navOptions.text,\r\n            routes = [];\r\n\r\n        // if not a route, callback is as is\r\n        if(!navOptions.route) {\r\n            navCallback = callback;\r\n        } else {\r\n            // a route will have extra logic in its callbacl\r\n            route = navOptions.route;\r\n            // determine the 'default' route for the link\r\n            // incase we want to have sub-navigations...\r\n            defaultRoute = route.split('/')[0];\r\n\r\n            // callback for the navigation\r\n            // tell crossroads to parse the default route when navigation occurs\r\n            navCallback = function () {\r\n                crossroads.parse(defaultRoute);\r\n            }\r\n\r\n            // creats the def for the current route\r\n            // route - the default route, e.g. the main route\r\n            // path - the sub path for the route, if any\r\n            // query - the query params in the route\r\n            // url - the full url constructed from all the args\r\n            decodeRoute = function(arg) {\r\n                // because crossroads cant handle thing:?foo:/bar:?thing:\r\n                // workaround - use 'rest' and deconstruct the arg ourselves..\r\n                if (typeof arg === 'string') {\r\n                    // if Arg is a string it is the path plus the serliazed query, so we need to split it\r\n                    var split = arg.split('?');\r\n\r\n                    // if the split yields more than 1 result, we have a query param\r\n                    if(split.length > 1) {\r\n                        arg = {\r\n                            route: defaultRoute,\r\n                            path: split[0],\r\n                            query: parseQuery('?'+split[1])\r\n                        }\r\n                    } else {\r\n                        // there is no query param\r\n                        arg = {\r\n                            route: defaultRoute,\r\n                            path: split[0] || ''\r\n                        }\r\n                    }\r\n                } else if (arg) { // if arg is defined but not a string, it is a query object\r\n                    arg = {\r\n                        route: defaultRoute,\r\n                        path: '',\r\n                        query: arg\r\n                    }\r\n                } else { // if arg is not defined at all, it is just the default route\r\n                    arg = {\r\n                        route: defaultRoute,\r\n                        path: ''\r\n                    }\r\n                }\r\n\r\n                // remove trailing \"/\" from path if exists\r\n                if(arg.path[arg.path.length - 1] === '/') {\r\n                    arg.path = arg.path.slice(0, arg.path.length-1);\r\n                }\r\n\r\n                // reconstruct the full url from the arg\r\n                arg.url = arg.route + (arg.path ? '/' + arg.path : '') + (arg.query ? '/?' + serialize(arg.query) : '');\r\n\r\n                // maintain a current reference to the arg\r\n                current = arg;\r\n                observableCurrent(current);\r\n\r\n                // if we disabled the routing, dont route!\r\n                if(!active) {\r\n                    return;\r\n                }\r\n\r\n                // call the callback on the route, and set the active link\r\n                callback(arg);\r\n                activeLink(link);\r\n            }\r\n\r\n            routes.push(crossroads.addRoute(route, decodeRoute));\r\n\r\n            // need to create 2 listeners for more complex routes (e.g. route + path)\r\n            if (route!==defaultRoute) {\r\n                routes.push(crossroads.addRoute(defaultRoute, decodeRoute));\r\n            }\r\n        }\r\n\r\n        link = merge(navOptions, {\r\n            navText: navText,\r\n            navigate: function () {\r\n                activeLink(link);\r\n                navCallback();\r\n            },\r\n            routes: routes,\r\n            canNav: navOptions.canNav || function () { return true }\r\n        });\r\n\r\n        navLinks.push(link);\r\n\r\n        navLinkMap[navText] = link;\r\n\r\n        return link;\r\n    }\r\n\r\n\r\n    function removeNav(navText) {\r\n        // removes nav from nav links, nav link map, and crossroads\r\n       if(navLinkMap[navText]){\r\n           navLinks.remove(navLinkMap[navText]);\r\n           navLinkMap[navText].routes.forEach(function(route) {\r\n               crossroads.removeRoute(route);\r\n           });\r\n           delete navLinkMap[navText];\r\n       }\r\n    }\r\n\r\n    function navigate(navText) {\r\n        // sets the active link to the link from map\r\n        if(activeLink() !== navLinkMap[navText]) {\r\n            activeLink(navLinkMap[navText]);\r\n        }\r\n    }\r\n\r\n    function init() {\r\n        // will set the initial active link if not defined to be the first one\r\n        if(navLinks().length !== 0 && !activeLink()) {\r\n            navLinks()[0].navigate();\r\n        }\r\n    }\r\n\r\n    function parseHash(newHash, oldHash) {\r\n        crossroads.parse(newHash);\r\n    }\r\n\r\n    function serialize(obj) {\r\n        var str = [];\r\n        for (var p in obj) {\r\n            if (obj.hasOwnProperty(p)) {\r\n              str.push(encodeURIComponent(p) + '=' + encodeURIComponent(typeof obj[p] === 'string' ? obj[p] : JSON.stringify(obj[p])));\r\n            }\r\n        }\r\n        return str.join('&');\r\n    }\r\n\r\n    function setRoute(url, query, shouldCallback, shouldNotReplace) {\r\n        var currentUrl = current.route + (current.path ? '/' + current.path : '');\r\n        // figure out if the app is trying to set the same route and disregard it\r\n        if (currentUrl === url &&\r\n            JSON.stringify(current.query || {}) === JSON.stringify(query)) {\r\n                console.warn('Trying to set the same route; will be disregarded');\r\n                return;\r\n            }\r\n\r\n        // disable the callback for the routing\r\n        if(shouldCallback === false) {\r\n            active=false;\r\n        }\r\n        if (query) {\r\n            url += '/?' + serialize(query);\r\n        }\r\n        // if shouldNotReplace is false, then it should replace instead of create a new history record\r\n        if (shouldNotReplace === false) {\r\n            setHash(url, true);\r\n        } else {\r\n            setHash(url)\r\n        }\r\n        active = true;\r\n    }\r\n\r\n    function reRoute() {\r\n        // resets the state of crossroads and reroutes to the latest url\r\n        var url = current.url;\r\n        crossroads.resetState();\r\n        crossroads.parse(url);\r\n    }\r\n\r\n    function getCurrent() {\r\n        return _.cloneDeep(observableCurrent());\r\n    }\r\n\r\n    function setHash(url, replace) {\r\n        if (allowSetHash) {\r\n           (replace ? hasher.replaceHash : hasher.setHash)(url);\r\n        } else {\r\n            parseHash(url);\r\n        }\r\n    }\r\n\r\n    navigation = {\r\n        navLinks: navLinks,\r\n        activeLink: activeLink,\r\n        navigate: navigate,\r\n        addNav: addNav,\r\n        removeNav: removeNav,\r\n        init: init,\r\n        setRoute: setRoute,\r\n        getCurrent: getCurrent,\r\n        reRoute: reRoute,\r\n        serialize: serialize,\r\n        allowSetHash: allowSetHash\r\n    }\r\n\r\n    var layout = { content: ko.observable() };\r\n\r\n    core.registerExtension({\r\n        navigation: navigation,\r\n        layout: layout\r\n    });\r\n\r\n    // when a route is detected, set the hash\r\n    crossroads.routed.add(function (request, data) {\r\n        setHash(request);\r\n    });\r\n\r\n    // if a route is bypassed\r\n    // either there are nav links and the nav doesnt exist so nav to the first link\r\n    // or there are no nav links in which case navigation still needs to be set up\r\n    // so store the url in current\r\n    crossroads.bypassed.add(function (request) {\r\n        if(navLinks()[0]) {\r\n            navLinks()[0].navigate();\r\n        } else {\r\n            current = {\r\n                url: request\r\n            };\r\n            observableCurrent(current);\r\n        }\r\n    });\r\n\r\n    hasher.initialized.add(parseHash);\r\n    hasher.changed.add(parseHash);\r\n\r\n    core.onApplicationEvent(function (event) {\r\n        if (event === 'started') {\r\n            // wait for all modules to register before initialization\r\n            setTimeout(function () {\r\n                hasher.init();\r\n                navigation.init();\r\n            });\r\n        }\r\n    });\r\n\r\n    export {\r\n        navigation, \r\n        layout,\r\n        navLinks,\r\n        activeLink,\r\n        navigate,\r\n        addNav,\r\n        removeNav,\r\n        init,\r\n        setRoute,\r\n        getCurrent,\r\n        reRoute,\r\n        serialize,\r\n        allowSetHash\r\n    };\r\n"]}