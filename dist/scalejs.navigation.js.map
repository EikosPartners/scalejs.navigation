{"version":3,"sources":["../src/scalejs.navigation.js"],"names":["merge","object","navLinks","observableArray","activeLink","observable","has","navLinkMap","navigation","active","config","type","is","module","allowSetHash","current","observableCurrent","defaultLinkIndex","parseQuery","qstr","query","parsed","a","substr","split","i","length","b","decodeURIComponent","JSON","parse","ignore","Object","keys","forEach","key","indexOf","addNav","navOptions","callback","route","defaultRoute","navCallback","link","decodeRoute","navText","text","routes","arg","path","slice","url","serialize","push","addRoute","navigate","canNav","removeNav","remove","removeRoute","init","initial","reRoute","parseHash","newHash","oldHash","obj","str","p","hasOwnProperty","encodeURIComponent","stringify","join","setRoute","shouldCallback","shouldNotReplace","currentUrl","console","warn","setHash","resetState","getCurrent","cloneDeep","setCurrent","replace","replaceHash","layout","content","registerExtension","routed","add","request","data","bypassed","initialized","changed"],"mappings":"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","file":"scalejs.navigation.js","sourcesContent":["import core from 'scalejs.core';\r\nimport ko from 'knockout';\r\nimport crossroads from 'crossroads';\r\nimport hasher from 'hasher';\r\nimport _ from 'lodash';\r\n\r\n    var merge = core.object.merge,\r\n        navLinks = ko.observableArray(),\r\n        activeLink = ko.observable(),\r\n        has = core.object.has,\r\n        navLinkMap = {},\r\n        navigation = navigation,\r\n        active = true,\r\n        config = core.type.is(module.config, 'function') ? module.config() || {} : {},\r\n        allowSetHash = has(config.allowSetHash) ? config.allowSetHash : true,\r\n        current = {},\r\n        observableCurrent = ko.observable(current),\r\n        defaultLinkIndex = 0;\r\n\r\n    function parseQuery(qstr) {\r\n        var query = {}, parsed;\r\n        var a = qstr.substr(1).split('&');\r\n        for (var i = 0; i < a.length; i = i+1 ) {\r\n            var b = a[i].split('=');\r\n\r\n            query[decodeURIComponent(b[0])] = decodeURIComponent(b[1] || '');\r\n            try {\r\n                query[decodeURIComponent(b[0])] = JSON.parse(query[decodeURIComponent(b[0])])\r\n            }\r\n            catch(ignore) {\r\n                //if it's already a string, we don't need to do anything\r\n            }\r\n        }\r\n        Object.keys(query).forEach(function(key) {\r\n            // TODO: implement better typecasting\r\n            if (query[key] === 'true') {\r\n                query[key] = true;\r\n            }\r\n            else if (query[key] === 'false') {\r\n                query[key] = false;\r\n            }\r\n            else if (typeof query[key] === 'string' && query[key].indexOf(',') !== -1) {\r\n               query[key] = query[key].split(',');\r\n            }\r\n        })\r\n        return query;\r\n    }\r\n\r\n    function addNav(navOptions, callback) {\r\n        var route, defaultRoute, navCallback, link, decodeRoute,\r\n            navText = navOptions.text,\r\n            routes = [];\r\n\r\n        // if not a route, callback is as is\r\n        if(!navOptions.route) {\r\n            navCallback = callback;\r\n        } else {\r\n            // a route will have extra logic in its callbacl\r\n            route = navOptions.route;\r\n            // determine the 'default' route for the link\r\n            // incase we want to have sub-navigations...\r\n            defaultRoute = route.split('/')[0];\r\n\r\n            // callback for the navigation\r\n            // tell crossroads to parse the default route when navigation occurs\r\n            navCallback = function () {\r\n                crossroads.parse(defaultRoute);\r\n            }\r\n\r\n            // creats the def for the current route\r\n            // route - the default route, e.g. the main route\r\n            // path - the sub path for the route, if any\r\n            // query - the query params in the route\r\n            // url - the full url constructed from all the args\r\n            decodeRoute = function(arg) {\r\n                // because crossroads cant handle thing:?foo:/bar:?thing:\r\n                // workaround - use 'rest' and deconstruct the arg ourselves..\r\n                if (typeof arg === 'string') {\r\n                    // if Arg is a string it is the path plus the serliazed query, so we need to split it\r\n                    var split = arg.split('?');\r\n\r\n                    // if the split yields more than 1 result, we have a query param\r\n                    if(split.length > 1) {\r\n                        arg = {\r\n                            route: defaultRoute,\r\n                            path: split[0],\r\n                            query: parseQuery('?'+split[1])\r\n                        }\r\n                    } else {\r\n                        // there is no query param\r\n                        arg = {\r\n                            route: defaultRoute,\r\n                            path: split[0] || ''\r\n                        }\r\n                    }\r\n                } else if (arg) { // if arg is defined but not a string, it is a query object\r\n                    arg = {\r\n                        route: defaultRoute,\r\n                        path: '',\r\n                        query: arg\r\n                    }\r\n                } else { // if arg is not defined at all, it is just the default route\r\n                    arg = {\r\n                        route: defaultRoute,\r\n                        path: ''\r\n                    }\r\n                }\r\n\r\n                // remove trailing \"/\" from path if exists\r\n                if(arg.path[arg.path.length - 1] === '/') {\r\n                    arg.path = arg.path.slice(0, arg.path.length-1);\r\n                }\r\n\r\n                // reconstruct the full url from the arg\r\n                arg.url = arg.route + (arg.path ? '/' + arg.path : '') + (arg.query ? '/?' + serialize(arg.query) : '');\r\n\r\n                // maintain a current reference to the arg\r\n                current = arg;\r\n                observableCurrent(current);\r\n\r\n                // if we disabled the routing, dont route!\r\n                if(!active) {\r\n                    return;\r\n                }\r\n\r\n                // call the callback on the route, and set the active link\r\n                callback(arg);\r\n                activeLink(link);\r\n            }\r\n\r\n            routes.push(crossroads.addRoute(route, decodeRoute));\r\n\r\n            // need to create 2 listeners for more complex routes (e.g. route + path)\r\n            if (route!==defaultRoute) {\r\n                routes.push(crossroads.addRoute(defaultRoute, decodeRoute));\r\n            }\r\n        }\r\n\r\n        link = merge(navOptions, {\r\n            navText: navText,\r\n            navigate: function () {\r\n                activeLink(link);\r\n                navCallback();\r\n            },\r\n            routes: routes,\r\n            canNav: navOptions.canNav || function () { return true }\r\n        });\r\n\r\n        navLinks.push(link);\r\n\r\n        navLinkMap[navText] = link;\r\n\r\n        return link;\r\n    }\r\n\r\n\r\n    function removeNav(navText) {\r\n        // removes nav from nav links, nav link map, and crossroads\r\n       if(navLinkMap[navText]){\r\n           navLinks.remove(navLinkMap[navText]);\r\n           navLinkMap[navText].routes.forEach(function(route) {\r\n               crossroads.removeRoute(route);\r\n           });\r\n           delete navLinkMap[navText];\r\n       }\r\n    }\r\n\r\n    function navigate(navText) {\r\n        // sets the active link to the link from map\r\n        if(activeLink() !== navLinkMap[navText]) {\r\n            activeLink(navLinkMap[navText]);\r\n        }\r\n    }\r\n\r\n    function init(initial = 0) {\r\n        defaultLinkIndex = initial;\r\n        hasher.init();\r\n        // will set the initial active link if not defined to be the first one\r\n        if(navLinks().length !== 0 && !activeLink()) {\r\n            // navLinks()[initial].navigate(); // previously, we navigated to first link\r\n            // now, we leverage \"reRoute\" code which will allow us to use internally set route\r\n            reRoute();\r\n        }\r\n    }\r\n\r\n    function parseHash(newHash, oldHash) {\r\n        crossroads.parse(newHash);\r\n    }\r\n\r\n    function serialize(obj) {\r\n        var str = [];\r\n        for (var p in obj) {\r\n            if (obj.hasOwnProperty(p)) {\r\n              str.push(encodeURIComponent(p) + '=' + encodeURIComponent(typeof obj[p] === 'string' ? obj[p] : JSON.stringify(obj[p])));\r\n            }\r\n        }\r\n        return str.join('&');\r\n    }\r\n\r\n    function setRoute(url, query, shouldCallback, shouldNotReplace) {\r\n        var currentUrl = current.route + (current.path ? '/' + current.path : '');\r\n        // figure out if the app is trying to set the same route and disregard it\r\n        if (currentUrl === url &&\r\n            JSON.stringify(current.query || {}) === JSON.stringify(query)) {\r\n                console.warn('Trying to set the same route; will be disregarded');\r\n                return;\r\n            }\r\n\r\n        // disable the callback for the routing\r\n        if(shouldCallback === false) {\r\n            active=false;\r\n        }\r\n        if (query) {\r\n            url += '/?' + serialize(query);\r\n        }\r\n        // if shouldNotReplace is false, then it should replace instead of create a new history record\r\n        if (shouldNotReplace === false) {\r\n            setHash(url, true);\r\n        } else {\r\n            setHash(url)\r\n        }\r\n        active = true;\r\n    }\r\n\r\n    function reRoute() {\r\n        // resets the state of crossroads and reroutes to the latest url\r\n        var url = current.url;\r\n        crossroads.resetState();\r\n        crossroads.parse(url);\r\n    }\r\n\r\n    function getCurrent() {\r\n        return _.cloneDeep(observableCurrent());\r\n    }\r\n\r\n    function setCurrent(obj) {\r\n        current = obj;\r\n        observableCurrent(current);\r\n    }\r\n\r\n    function setHash(url, replace) {\r\n        if (allowSetHash) {\r\n           (replace ? hasher.replaceHash : hasher.setHash)(url);\r\n        } else {\r\n            parseHash(url);\r\n        }\r\n    }\r\n\r\n    navigation = {\r\n        navLinks: navLinks,\r\n        activeLink: activeLink,\r\n        navigate: navigate,\r\n        addNav: addNav,\r\n        removeNav: removeNav,\r\n        init: init,\r\n        setRoute: setRoute,\r\n        getCurrent: getCurrent,\r\n        setCurrent: setCurrent,\r\n        reRoute: reRoute,\r\n        serialize: serialize,\r\n        allowSetHash: allowSetHash\r\n    }\r\n\r\n    var layout = { content: ko.observable() };\r\n\r\n    core.registerExtension({\r\n        navigation: navigation,\r\n        layout: layout\r\n    });\r\n\r\n    // when a route is detected, set the hash\r\n    crossroads.routed.add(function (request, data) {\r\n        setHash(request);\r\n    });\r\n\r\n    // if a route is bypassed\r\n    // either there are nav links and the nav doesnt exist so nav to the first link (or defaultLinkIndex)\r\n    // or there are no nav links in which case navigation still needs to be set up\r\n    // so store the url in current\r\n    crossroads.bypassed.add(function (request) {\r\n        if(navLinks()[defaultLinkIndex]) {\r\n            navLinks()[defaultLinkIndex].navigate();\r\n        } else {\r\n            current = {\r\n                url: request\r\n            };\r\n            observableCurrent(current);\r\n        }\r\n    });\r\n\r\n    hasher.initialized.add(parseHash);\r\n    hasher.changed.add(parseHash);\r\n\r\n    // core.onApplicationEvent(function (event) {\r\n    //     if (event === 'started') {\r\n    //         // wait for all modules to register before initialization\r\n    //         setTimeout(function () {\r\n    //             hasher.init();\r\n    //             navigation.init();\r\n    //         });\r\n    //     }\r\n    // });\r\n\r\n    export {\r\n        navigation, \r\n        layout,\r\n        navLinks,\r\n        activeLink,\r\n        navigate,\r\n        addNav,\r\n        removeNav,\r\n        init,\r\n        setRoute,\r\n        getCurrent,\r\n        setCurrent,\r\n        reRoute,\r\n        serialize,\r\n        allowSetHash\r\n    };\r\n"]}